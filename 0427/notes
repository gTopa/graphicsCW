Animation:

r:0-360,5
push
move
250 250 0
rotate
y r
sphere
0 0 0 100
save
(r/5).png

Compiler: source code -> compiler -> machine code
   -generally made up of 5 dif processes:
      1. lexer
      2. parser
      3. semantic analyzer
      4. optimizer
      5. code generator

Lexer:
   -Performs lexical analysis
   -Knows all valid tokens
   -Input: source code
   -Output: token list

   code:
   int main(){
      long x=5+6;
      //woohoo
      printf("%d",x);
      return 8;
   }

   token list (data file):
   int -> K
   main -> I
   ( -> S
   ) -> S
   { -> S
   long -> K
   x -> I
   = -> S
   5 -> V
   + -> K
   6 -> V
   ; -> S    *no woohoo
   print ->I
   ...

Parser:
   -Knows the grammar of the language
   -Syntax analysis
   -Input: token list
   -Output: syntax tree

   syntax tree:
      int
       |
      main-return-8
     /    \
    =	printf
   / \	  /   \
long  + "%d"   x
  |  /\
  x 5  6

Semantic Analyzer:
   -Knows how to map tokens from syntax tree to operations, identifiers and values
   -Input: syntax tree
   -Output: operation list, symbol table (list of identifiers)

   operation list:    	    	   	 symbol table:
   +:5,6	     			 main:int
   =:x,prev Op				 x:long
   printf    				 printf:void, ...
   return:8

Code Generator:
   -Input: operation list, symbol table
   -Output: machine code


To write lexer need lexicon, to write parser, need structure